ggetwd())
getwd())
getwd()
setwd("E:/PlantCommunity/R")
getwd()
getwd()
Sys.setenv(LANG = "en")
community <- matrix(0, nrow = L, ncol = L)
L = 300
community <- matrix(0, nrow = L, ncol = L)
community
sample.int(c(0, L), n = 2)
sample.int(c(0, L), size = 2)
sample(c(0, L), size = 2)
sample(c(0, L), size = 2)
sample(seq(0, L), size = 2)
sample(seq(0, L), size = 2)
sample(seq(0, L), size = 2)
sample(seq(0, L), size = 2)
c(ini.row, ini.col) <- sample(seq(0, L), size = 2)
pi
parallel::detectCores()
rep(c(1:L), each = L)
rep(c(1:L), L)
coordinate_bank <- cbind(rep(c(1:L), each = L), rep(c(1:L), L))
coordinate_bank <- cbind(rep(c(1:L), each = L), rep(c(1:L), L))
coordinate_bank
coordinate_bank_list <- as.list(coordinate_bank)
coordinate_bank_list
install.packages(c("devtools", "roxygen2", "testthat", "usethis", "knitr"))
usethis::use_testthat()
use_test()
usethis::use_test()
usethis::use_test("colonization_probability")
L = 300
sig_disp = 2
tend = 10
num_cores = 4
torus = TRUE
numCores <- min(num_cores, parallel::detectCores())
community <-
matrix(0, nrow = L, ncol = L)  # initialize the grid
ini.row <- sample(seq(0, L), size = 1)
ini.col <- sample(seq(0, L), size = 1)
community[ini.row, ini.col] <- 1
abundence_vector <- c(L ^ 2 - 1, 1)
abundence_vector
t = 1
dead.row <- sample(seq(0, L), size = 1)
dead.col <- sample(seq(0, L), size = 1)
dead.species <- community[dead.row, dead.col]
abundence_vector[dead.species+1] <- abundence_vector[dead.species+1] - 1
coordinate_bank <-
cbind(rep(c(1:L), each = L), rep(c(1:L), L))
abundence_vector
coordinate_bank
jc_strength
jc_strength = 0.4
abundence_vector
community
colonization_probability <-
function(coordinate1,
coordinate2,
jc_strength,
abundence_vector,
L,
sig_disp,
community,
torus = TRUE) {
if (torus) {
x.dist <- min((coordinate1[1] - coordinate2[1]) ^ 2,
(
L - max(coordinate1[1], coordinate2[1]) + min(coordinate1[1], coordinate2[1])
) ^ 2)
y.dist <- min((coordinate1[2] - coordinate2[2]) ^ 2,
(
L - max(coordinate1[2], coordinate2[2]) + min(coordinate1[2], coordinate2[2])
) ^ 2)
distance <- sqrt(x.dist + y.dist)
} else {
distance <- sqrt(sum(coordinate1 - coordinate2) ^ 2)
}
abundance <- abundence_vector[community[coordinate1[1], coordinate1[2]] + 1]
probability <-
(1 - jc_strength * abundance / L ^ 2) * (1 / sqrt(2 * pi) / sig_disp * exp(-distance ^
2 / 2 / sig_disp ^ 2))
return(probability)
}
colonization_probability_cluster <-
parallel::mclapply(coordinate_bank[1:L, ],
PlantCommunity::colonization_probability(coordinate1,
coordinate2,
jc_strength,
abundance,
L,
sig_disp,
community),
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundence_vector,
L = L,
sig_disp = sig_disp,
community = community)
colonization_probability_cluster <-
parallel::mclapply(coordinate_bank[1:L, ],
colonization_probability(coordinate1,
coordinate2,
jc_strength,
abundance,
L,
sig_disp,
community),
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundence_vector,
L = L,
sig_disp = sig_disp,
community = community)
coordinate_bank[1:L, ]
coordinate_bank
colonization_probability <-
function(bank_index,
coordinate_bank,
coordinate2,
jc_strength,
abundence_vector,
L,
sig_disp,
community,
torus = TRUE) {
coordinate1 <- coordinate_bank[bank_index,]
if (torus) {
x.dist <- min((coordinate1[1] - coordinate2[1]) ^ 2,
(
L - max(coordinate1[1], coordinate2[1]) + min(coordinate1[1], coordinate2[1])
) ^ 2)
y.dist <- min((coordinate1[2] - coordinate2[2]) ^ 2,
(
L - max(coordinate1[2], coordinate2[2]) + min(coordinate1[2], coordinate2[2])
) ^ 2)
distance <- sqrt(x.dist + y.dist)
} else {
distance <- sqrt(sum(coordinate1 - coordinate2) ^ 2)
}
abundance <- abundence_vector[community[coordinate1[1], coordinate1[2]] + 1]
probability <-
(1 - jc_strength * abundance / L ^ 2) * (1 / sqrt(2 * pi) / sig_disp * exp(-distance ^
2 / 2 / sig_disp ^ 2))
return(probability)
}
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
colonization_probability(
bank_index,
coordinate_bank,
coordinate2,
jc_strength,
abundance,
L,
sig_disp,
community
),
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundence_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
colonization_probability(
bank_index,
coordinate_bank,
coordinate2,
jc_strength,
abundence_vector,
L,
sig_disp,
community
),
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundence_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundence_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability <-
function(bank_index,
coordinate_bank,
coordinate2,
jc_strength,
abundence_vector,
L,
sig_disp,
community,
torus = TRUE) {
coordinate1 <- coordinate_bank[bank_index,]
if (torus) {
x.dist <- min((coordinate1[1] - coordinate2[1]) ^ 2,
(
L - max(coordinate1[1], coordinate2[1]) + min(coordinate1[1], coordinate2[1])
) ^ 2)
y.dist <- min((coordinate1[2] - coordinate2[2]) ^ 2,
(
L - max(coordinate1[2], coordinate2[2]) + min(coordinate1[2], coordinate2[2])
) ^ 2)
distance <- sqrt(x.dist + y.dist)
} else {
distance <- sqrt(sum(coordinate1 - coordinate2) ^ 2)
}
abundance <- abundence_vector[community[coordinate1[1], coordinate1[2]] + 1]
probability <-
(1 - jc_strength * abundance / L ^ 2) * (1 / sqrt(2 * pi) / sig_disp * exp(-distance ^
2 / 2 / sig_disp ^ 2))
return(probability)
}
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundence_vector,
L = L,
sig_disp = sig_disp,
community = community
)
abundence_vector
bank_index = 4
coordinate_bank
coordinate1 <- coordinate_bank[bank_index,]
coordinate1
torus
x.dist <- min((coordinate1[1] - coordinate2[1]) ^ 2,
(
L - max(coordinate1[1], coordinate2[1]) + min(coordinate1[1], coordinate2[1])
) ^ 2)
coordinate2 = c(dead.row, dead.col)
x.dist <- min((coordinate1[1] - coordinate2[1]) ^ 2,
(
L - max(coordinate1[1], coordinate2[1]) + min(coordinate1[1], coordinate2[1])
) ^ 2)
y.dist <- min((coordinate1[2] - coordinate2[2]) ^ 2,
(
L - max(coordinate1[2], coordinate2[2]) + min(coordinate1[2], coordinate2[2])
) ^ 2)
distance <- sqrt(x.dist + y.dist)
distance
abundance <- abundence_vector[community[coordinate1[1], coordinate1[2]] + 1]
abundance
probability <-
(1 - jc_strength * abundance / L ^ 2) * (1 / sqrt(2 * pi) / sig_disp * exp(-distance ^
2 / 2 / sig_disp ^ 2))
probability
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundence_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability <-
function(bank_index,
coordinate_bank,
coordinate2,
jc_strength,
abundance_vector,
L,
sig_disp,
community,
torus = TRUE) {
coordinate1 <- coordinate_bank[bank_index,]
if (torus) {
x.dist <- min((coordinate1[1] - coordinate2[1]) ^ 2,
(
L - max(coordinate1[1], coordinate2[1]) + min(coordinate1[1], coordinate2[1])
) ^ 2)
y.dist <- min((coordinate1[2] - coordinate2[2]) ^ 2,
(
L - max(coordinate1[2], coordinate2[2]) + min(coordinate1[2], coordinate2[2])
) ^ 2)
distance <- sqrt(x.dist + y.dist)
} else {
distance <- sqrt(sum(coordinate1 - coordinate2) ^ 2)
}
abundance <- abundence_vector[community[coordinate1[1], coordinate1[2]] + 1]
probability <-
(1 - jc_strength * abundance / L ^ 2) * (1 / sqrt(2 * pi) / sig_disp * exp(-distance ^
2 / 2 / sig_disp ^ 2))
return(probability)
}
abundance_vector <- c(L ^ 2 - 1, 1)
abundance_vector[dead.species + 1] <-
abundance_vector[dead.species + 1] - 1
coordinate_bank <-
cbind(rep(c(1:L), each = L), rep(c(1:L), L))
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundance_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability_cluster
test_a <- matrix(1:16, 4, 4)
test_a
test_a[5]
test_a[10]
library(PlantCommunity)
as.matrix(c(1,1))
t(as.matrix(c(1,1)))
test_that("self_excluded", {
expect_identical(colonization_probability(bank_index = 1,
coordinate_bank = t(as.matrix(c(1,1))),
coordinate2 = c(1, 1),
jc_strength = 0.5,
abundance_vector = c(100),
L = 10,
sig_disp = 1,
community = matrix(0, 10, 10),
torus = TRUE), 0)
})
all(c(TRUE, TRUE))
library(PlantCommunity)
L = 300
jc_strength = 0.5
sig_disp = 5
tend = 100
num_cores = 4
torus = TRUE
numCores <- min(num_cores, parallel::detectCores())
community <-
matrix(0, nrow = L, ncol = L)  # initialize the grid
ini.row <- sample(seq(0, L), size = 1)
ini.col <- sample(seq(0, L), size = 1)
community[ini.row, ini.col] <- 1
abundance_vector <- c(L ^ 2 - 1, 1)
t = 1
dead.row <- sample(seq(0, L), size = 1)
dead.col <- sample(seq(0, L), size = 1)
dead.species <- community[dead.row, dead.col]
abundance_vector[dead.species + 1] <-
abundance_vector[dead.species + 1] - 1
coordinate_bank <-
cbind(rep(c(1:L), each = L), rep(c(1:L), L))
coordinate_bank
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundance_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
PlantCommunity::colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundance_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
PlantCommunity::colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundance_vector,
L = L,
sig_disp = sig_disp,
community = community
)
library(PlantCommunity)
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
PlantCommunity::colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundance_vector,
L = L,
sig_disp = sig_disp,
community = community
)
library(PlantCommunity)
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
PlantCommunity::colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundance_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability_cluster
colonization_probability_vector <- unlist(colonization_probability_cluster)
colonization_probability_vector
coordinate_bank
coordinate_bank <-
cbind(rep(c(1:L), L), rep(c(1:L), each = L))
coordinate_bank
colonization_probability_cluster <-
parallel::mclapply(
1:L ^ 2,
PlantCommunity::colonization_probability,
coordinate_bank = coordinate_bank,
coordinate2 = c(dead.row, dead.col),
jc_strength = jc_strength,
abundance_vector = abundance_vector,
L = L,
sig_disp = sig_disp,
community = community
)
colonization_probability_vector <- unlist(colonization_probability_cluster)
colonization_probability_vector
speciation_rate = 0.0001
sample_birth_speciation_event <- sample(c(1, 2), size = 1, prob = c(1 - speciation_rate, speciation_rate))
sample_birth_speciation_event
community
sample.parent.to.give.birth <- sample(community[1:L ^ 2], size = 1, prob = colonization_probability_vector)
sample.parent.to.give.birth
community[dead.row, dead.col] <- sample.parent.to.give.birth
# update the corresponding abundance
abundance_vector[sample.parent.to.give.birth + 1] <-
abundance_vector[sample.parent.to.give.birth + 1] + 1
abundance_vector
length(abundance_vector)
